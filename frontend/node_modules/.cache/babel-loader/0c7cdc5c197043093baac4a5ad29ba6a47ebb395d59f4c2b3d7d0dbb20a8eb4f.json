{"ast":null,"code":"var _jsxFileName = \"/Users/vincentng/Documents/170/connect_4/frontend/src/Connect4Board.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ROWS = 6;\nconst COLS = 7;\nexport default function Connect4Board() {\n  _s();\n  const [board, setBoard] = useState(Array(ROWS).fill(null).map(() => Array(COLS).fill(0)));\n  const [playerTurn, setPlayerTurn] = useState(true);\n  const [currentPlayer, setCurrentPlayer] = useState(1);\n  const [gameOver, setGameOver] = useState(false);\n  const [winner, setWinner] = useState(null);\n  const [message, setMessage] = useState(\"Choose your opponent and click a column to start!\");\n  const [winningLine, setWinningLine] = useState(null);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [opponents, setOpponents] = useState({});\n  const [selectedOpponent, setSelectedOpponent] = useState(\"alphaBetaAI\");\n  const [currentOpponent, setCurrentOpponent] = useState(\"alphaBetaAI\");\n  const [isHumanVsHuman, setIsHumanVsHuman] = useState(false);\n  const [isProcessingMove, setIsProcessingMove] = useState(false);\n\n  // Client-side win detection as a backup\n  const checkWinner = useCallback(board => {\n    // Check horizontal\n    for (let row = 0; row < ROWS; row++) {\n      for (let col = 0; col < COLS - 3; col++) {\n        const piece = board[row][col];\n        if (piece !== 0 && piece === board[row][col + 1] && piece === board[row][col + 2] && piece === board[row][col + 3]) {\n          return {\n            winner: piece,\n            line: [[row, col], [row, col + 1], [row, col + 2], [row, col + 3]]\n          };\n        }\n      }\n    }\n\n    // Check vertical\n    for (let row = 0; row < ROWS - 3; row++) {\n      for (let col = 0; col < COLS; col++) {\n        const piece = board[row][col];\n        if (piece !== 0 && piece === board[row + 1][col] && piece === board[row + 2][col] && piece === board[row + 3][col]) {\n          return {\n            winner: piece,\n            line: [[row, col], [row + 1, col], [row + 2, col], [row + 3, col]]\n          };\n        }\n      }\n    }\n\n    // Check diagonal (top-left to bottom-right)\n    for (let row = 0; row < ROWS - 3; row++) {\n      for (let col = 0; col < COLS - 3; col++) {\n        const piece = board[row][col];\n        if (piece !== 0 && piece === board[row + 1][col + 1] && piece === board[row + 2][col + 2] && piece === board[row + 3][col + 3]) {\n          return {\n            winner: piece,\n            line: [[row, col], [row + 1, col + 1], [row + 2, col + 2], [row + 3, col + 3]]\n          };\n        }\n      }\n    }\n\n    // Check diagonal (bottom-left to top-right)\n    for (let row = 3; row < ROWS; row++) {\n      for (let col = 0; col < COLS - 3; col++) {\n        const piece = board[row][col];\n        if (piece !== 0 && piece === board[row - 1][col + 1] && piece === board[row - 2][col + 2] && piece === board[row - 3][col + 3]) {\n          return {\n            winner: piece,\n            line: [[row, col], [row - 1, col + 1], [row - 2, col + 2], [row - 3, col + 3]]\n          };\n        }\n      }\n    }\n\n    // Check for tie\n    const isTie = board.every(row => row.every(cell => cell !== 0));\n    if (isTie) {\n      return {\n        winner: 0,\n        line: null\n      }; // 0 represents tie\n    }\n    return null;\n  }, []);\n\n  // Load available opponents when component mounts\n  useEffect(() => {\n    const loadOpponents = async () => {\n      try {\n        const res = await fetch('http://localhost:5001/get-opponents');\n        const data = await res.json();\n        setOpponents(data.opponents);\n        setCurrentOpponent(data.current);\n        setSelectedOpponent(data.current);\n        setIsHumanVsHuman(data.is_human_vs_human || false);\n      } catch (error) {\n        console.error(\"Error loading opponents:\", error);\n        // Fallback opponents if backend is not available\n        setOpponents({\n          \"human\": \"Local 2-Player\",\n          \"randomAI\": \"Random AI - Easy\",\n          \"alphaBetaAI\": \"Alpha-Beta AI - Hard\"\n        });\n      }\n    };\n    loadOpponents();\n  }, []);\n\n  // Client-side validation after each move\n  useEffect(() => {\n    if (gameStarted && !gameOver) {\n      const result = checkWinner(board);\n      if (result) {\n        setGameOver(true);\n        setWinner(result.winner);\n        setWinningLine(result.line);\n        if (result.winner === 1) {\n          setMessage(\"Player 1 (Red) Wins! 🎉\");\n        } else if (result.winner === 2) {\n          if (isHumanVsHuman) {\n            setMessage(\"Player 2 (Yellow) Wins! 🎉\");\n          } else {\n            var _opponents$currentOpp;\n            setMessage(`${((_opponents$currentOpp = opponents[currentOpponent]) === null || _opponents$currentOpp === void 0 ? void 0 : _opponents$currentOpp.split(' ')[0]) || 'AI'} Wins! 🤖`);\n          }\n        } else {\n          setMessage(\"It's a Tie! 🤝\");\n        }\n      }\n    }\n  }, [board, gameStarted, gameOver, checkWinner, isHumanVsHuman, opponents, currentOpponent]);\n\n  // Function to change opponent\n  const changeOpponent = async aiType => {\n    if (gameStarted) {\n      setMessage(\"Cannot change opponent after game has started!\");\n      return;\n    }\n    try {\n      const res = await fetch('http://localhost:5001/set-opponent', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          ai_type: aiType\n        })\n      });\n      const data = await res.json();\n      if (data.error) {\n        setMessage(data.error);\n      } else {\n        setCurrentOpponent(aiType);\n        setSelectedOpponent(aiType);\n        setIsHumanVsHuman(data.is_human_vs_human || false);\n        if (data.is_human_vs_human) {\n          setMessage(\"Local 2-Player mode! Player 1 (red) starts. Click a column!\");\n        } else {\n          setMessage(`Now playing against ${opponents[aiType]}. Click a column to start!`);\n        }\n      }\n    } catch (error) {\n      console.error(\"Error changing opponent:\", error);\n      // Handle offline mode\n      if (aiType === \"human\") {\n        setIsHumanVsHuman(true);\n        setMessage(\"Local 2-Player mode! Player 1 (red) starts. Click a column!\");\n      } else {\n        setMessage(\"Error changing opponent - backend not available\");\n      }\n    }\n  };\n\n  // Function to reset the game state\n  const resetGame = async () => {\n    try {\n      const res = await fetch('http://localhost:5001/reset', {\n        method: 'POST'\n      });\n      const data = await res.json();\n      setBoard(Array(ROWS).fill(null).map(() => Array(COLS).fill(0)));\n      setPlayerTurn(true);\n      setCurrentPlayer(1);\n      setGameOver(false);\n      setWinner(null);\n      setWinningLine(null);\n      setGameStarted(false);\n      setIsProcessingMove(false);\n      setIsHumanVsHuman(data.is_human_vs_human || false);\n      if (data.is_human_vs_human) {\n        setMessage(\"Local 2-Player mode! Player 1 (red) starts. Click a column!\");\n      } else {\n        setMessage(\"Choose your opponent and click a column to start!\");\n      }\n    } catch (error) {\n      console.error(\"Error resetting game:\", error);\n      // Reset frontend state even if backend reset fails\n      setBoard(Array(ROWS).fill(null).map(() => Array(COLS).fill(0)));\n      setPlayerTurn(true);\n      setCurrentPlayer(1);\n      setGameOver(false);\n      setWinner(null);\n      setWinningLine(null);\n      setGameStarted(false);\n      setIsProcessingMove(false);\n      setMessage(\"Game reset! (Backend may need manual restart)\");\n    }\n  };\n\n  // Client-side move validation\n  const isValidMove = col => {\n    return col >= 0 && col < COLS && board[0][col] === 0;\n  };\n\n  // Client-side move execution for local games\n  const makeLocalMove = (col, player) => {\n    if (!isValidMove(col)) return null;\n    const newBoard = board.map(row => [...row]);\n\n    // Find the lowest empty row in the column\n    for (let row = ROWS - 1; row >= 0; row--) {\n      if (newBoard[row][col] === 0) {\n        newBoard[row][col] = player;\n        return newBoard;\n      }\n    }\n    return null;\n  };\n  const handleClick = async col => {\n    console.log(\"Column clicked:\", col);\n    console.log(\"Current player:\", currentPlayer);\n    console.log(\"Game over:\", gameOver);\n    console.log(\"Is human vs human:\", isHumanVsHuman);\n    console.log(\"Is processing move:\", isProcessingMove);\n    if (gameOver || isProcessingMove) {\n      console.log(\"Click ignored - game over or processing\");\n      return;\n    }\n    if (!isValidMove(col)) {\n      setMessage(\"Column is full! Choose another column.\");\n      return;\n    }\n\n    // For human vs human, allow both players to click\n    // For human vs AI, only allow when it's player 1's turn\n    if (!isHumanVsHuman && !playerTurn) {\n      console.log(\"Click ignored - not player 1's turn in vs AI mode\");\n      return;\n    }\n    setIsProcessingMove(true);\n\n    // Set game as started on first move\n    if (!gameStarted) {\n      setGameStarted(true);\n    }\n    try {\n      if (isHumanVsHuman) {\n        // Handle local multiplayer\n        const newBoard = makeLocalMove(col, currentPlayer);\n        if (newBoard) {\n          setBoard(newBoard);\n          const nextPlayer = currentPlayer === 1 ? 2 : 1;\n          setCurrentPlayer(nextPlayer);\n\n          // Check for win locally\n          const result = checkWinner(newBoard);\n          if (!result) {\n            const nextPlayerName = nextPlayer === 1 ? \"Player 1 (Red)\" : \"Player 2 (Yellow)\";\n            setMessage(`${nextPlayerName}, your turn!`);\n          }\n        }\n        setIsProcessingMove(false);\n      } else {\n        // Handle backend communication\n        if (isHumanVsHuman) {\n          setMessage(`Player ${currentPlayer === 1 ? 2 : 1} (${currentPlayer === 1 ? 'yellow' : 'red'}), your turn!`);\n        } else {\n          setMessage(\"Making your move...\");\n        }\n        console.log(\"Sending move to backend:\", col);\n        const res = await fetch('http://localhost:5001/move', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            column: col\n          })\n        });\n        console.log(\"Response status:\", res.status);\n        if (!res.ok) {\n          throw new Error(`HTTP error! status: ${res.status}`);\n        }\n        const data = await res.json();\n        console.log(\"Response data:\", data);\n        if (data.error) {\n          setMessage(data.error);\n          setIsProcessingMove(false);\n          return;\n        }\n        setBoard(data.board);\n        setCurrentPlayer(data.current_player);\n        if (data.game_over) {\n          setGameOver(true);\n          setWinner(data.winner);\n          setWinningLine(data.winning_line);\n          if (data.winner === 1) {\n            setMessage(\"Player 1 (Red) Wins! 🎉\");\n          } else if (data.winner === 2) {\n            if (isHumanVsHuman) {\n              setMessage(\"Player 2 (Yellow) Wins! 🎉\");\n            } else {\n              var _opponents$currentOpp2;\n              setMessage(`${((_opponents$currentOpp2 = opponents[currentOpponent]) === null || _opponents$currentOpp2 === void 0 ? void 0 : _opponents$currentOpp2.split(' ')[0]) || 'AI'} Wins! 🤖`);\n            }\n          } else {\n            setMessage(\"It's a Tie! 🤝\");\n          }\n        } else {\n          if (!isHumanVsHuman) {\n            var _opponents$currentOpp3;\n            // In human vs AI mode, switch to AI's turn\n            setPlayerTurn(false);\n            const opponentName = ((_opponents$currentOpp3 = opponents[currentOpponent]) === null || _opponents$currentOpp3 === void 0 ? void 0 : _opponents$currentOpp3.split(' ')[0]) || 'AI';\n            setMessage(`${opponentName} is thinking...`);\n          }\n        }\n        setIsProcessingMove(false);\n      }\n    } catch (error) {\n      console.error(\"Error making human move:\", error);\n      setMessage(\"❌ Cannot connect to backend. Make sure Flask server is running on localhost:5001\");\n      setIsProcessingMove(false);\n    }\n  };\n  useEffect(() => {\n    // Only fetch AI move if it's AI's turn and game is not over and NOT human vs human\n    if (!playerTurn && !gameOver && !isHumanVsHuman && !isProcessingMove) {\n      const getAIMove = async () => {\n        setIsProcessingMove(true);\n        try {\n          const res = await fetch('http://localhost:5001/ai-move');\n          if (!res.ok) {\n            throw new Error(`HTTP error! status: ${res.status}`);\n          }\n          const data = await res.json();\n          if (data.error) {\n            setMessage(data.error);\n            setIsProcessingMove(false);\n            return;\n          }\n          setBoard(data.board);\n          setCurrentPlayer(data.current_player);\n          if (data.game_over) {\n            var _opponents$currentOpp4;\n            setGameOver(true);\n            setWinner(data.winner);\n            setWinningLine(data.winning_line);\n            if (data.winner === 1) setMessage(\"You Win! 🎉\");else if (data.winner === 2) setMessage(`${((_opponents$currentOpp4 = opponents[currentOpponent]) === null || _opponents$currentOpp4 === void 0 ? void 0 : _opponents$currentOpp4.split(' ')[0]) || 'AI'} Wins! 🤖`);else setMessage(\"It's a Tie! 🤝\");\n          } else {\n            setPlayerTurn(true);\n            setMessage(\"It's your turn!\");\n          }\n        } catch (error) {\n          console.error(\"Error getting AI move:\", error);\n          setMessage(\"Error: Cannot connect to backend for AI move\");\n        }\n        setIsProcessingMove(false);\n      };\n      const aiThinkingTimer = setTimeout(getAIMove, 500);\n      return () => clearTimeout(aiThinkingTimer);\n    }\n  }, [playerTurn, gameOver, isHumanVsHuman, isProcessingMove, opponents, currentOpponent]);\n\n  // Function to check if a cell is part of the winning line\n  const isWinningCell = (row, col) => {\n    if (!winningLine) return false;\n    return winningLine.some(([r, c]) => r === row && c === col);\n  };\n\n  // Function to determine cell color based on player number\n  const getCellColor = (cellValue, row, col) => {\n    const baseColor = cellValue === 1 ? 'bg-red-500' : cellValue === 2 ? 'bg-yellow-400' : 'bg-white';\n    if (isWinningCell(row, col)) {\n      return `${baseColor} ring-4 ring-white shadow-2xl animate-pulse`;\n    }\n    return baseColor;\n  };\n\n  // Get appropriate turn indicator\n  const getTurnIndicator = () => {\n    if (gameOver) return \"\";\n    if (isProcessingMove) return \"⏳\";\n    if (isHumanVsHuman) {\n      return currentPlayer === 1 ? \"🔴\" : \"🟡\";\n    } else {\n      return playerTurn ? \"🔴\" : \"🤖\";\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center justify-center min-h-screen bg-gradient-to-br from-blue-900 via-blue-800 to-purple-800 p-4 text-white\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-5xl font-bold mb-4 text-white drop-shadow-lg\",\n      children: \"Connect 4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 432,\n      columnNumber: 7\n    }, this), !gameStarted && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-6 flex flex-col items-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"text-lg font-semibold mb-2\",\n        children: \"Choose Your Opponent:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 437,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedOpponent,\n        onChange: e => {\n          setSelectedOpponent(e.target.value);\n          changeOpponent(e.target.value);\n        },\n        className: \"bg-blue-700 text-white px-4 py-2 rounded-lg border border-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-400 text-center min-w-64\",\n        children: Object.entries(opponents).map(([key, description]) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: key,\n          children: description\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 447,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 438,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 436,\n      columnNumber: 9\n    }, this), gameStarted && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-4 text-lg text-blue-200\",\n      children: isHumanVsHuman ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [\"Playing: \", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"font-semibold text-white\",\n          children: \"Local 2-Player\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 458,\n          columnNumber: 24\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [\"Playing against: \", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"font-semibold text-white\",\n          children: opponents[currentOpponent]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 460,\n          columnNumber: 32\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 456,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-6 text-2xl font-semibold text-center min-h-8 flex items-center gap-2\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: getTurnIndicator()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 466,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 467,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 465,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"relative\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"absolute -top-16 left-0 right-0 h-16 flex z-10\",\n        children: Array.from({\n          length: COLS\n        }).map((_, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          onClick: () => handleClick(colIndex),\n          className: `flex-1 h-full transition-all duration-200 flex items-center justify-center ${!gameOver && !isProcessingMove && isValidMove(colIndex) ? 'cursor-pointer hover:bg-white hover:bg-opacity-20 rounded-t-lg' : 'cursor-not-allowed opacity-50'}`,\n          style: {\n            minHeight: '64px'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `w-3 h-3 rounded-full opacity-0 hover:opacity-100 transition-opacity duration-200 ${isHumanVsHuman ? currentPlayer === 1 ? 'bg-red-500' : 'bg-yellow-400' : 'bg-red-500'}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 484,\n            columnNumber: 15\n          }, this)\n        }, `click-${colIndex}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 474,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 472,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-7 gap-2 p-4 bg-blue-600 rounded-2xl shadow-2xl border-4 border-blue-500\",\n        children: board.map((row, rowIndex) => row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-16 h-16 bg-blue-800 rounded-full flex items-center justify-center shadow-inner transition-colors duration-200\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `w-12 h-12 rounded-full ${getCellColor(cell, rowIndex, colIndex)} shadow-lg transition-all duration-300 ease-out border-2 border-opacity-20 border-white`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 503,\n            columnNumber: 17\n          }, this)\n        }, `${rowIndex}-${colIndex}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 499,\n          columnNumber: 15\n        }, this)))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 496,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 470,\n      columnNumber: 7\n    }, this), gameOver && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: resetGame,\n      className: \"mt-8 px-8 py-4 bg-green-500 hover:bg-green-600 text-white font-bold text-xl rounded-xl shadow-lg transition-all duration-200 transform hover:scale-105\",\n      children: \"Play Again\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 513,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-6 text-sm text-blue-200 text-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Click on a column to drop your piece\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 522,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Connect 4 pieces horizontally, vertically, or diagonally to win!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 523,\n        columnNumber: 9\n      }, this), isHumanVsHuman && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"mt-1 font-semibold\",\n        children: \"\\uD83D\\uDD34 Player 1 (Red) vs \\uD83D\\uDFE1 Player 2 (Yellow)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 525,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 521,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 431,\n    columnNumber: 5\n  }, this);\n}\n_s(Connect4Board, \"kJFw5NLA6ntwCRDPU7Feg1CEehk=\");\n_c = Connect4Board;\nvar _c;\n$RefreshReg$(_c, \"Connect4Board\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","jsxDEV","_jsxDEV","Fragment","_Fragment","ROWS","COLS","Connect4Board","_s","board","setBoard","Array","fill","map","playerTurn","setPlayerTurn","currentPlayer","setCurrentPlayer","gameOver","setGameOver","winner","setWinner","message","setMessage","winningLine","setWinningLine","gameStarted","setGameStarted","opponents","setOpponents","selectedOpponent","setSelectedOpponent","currentOpponent","setCurrentOpponent","isHumanVsHuman","setIsHumanVsHuman","isProcessingMove","setIsProcessingMove","checkWinner","row","col","piece","line","isTie","every","cell","loadOpponents","res","fetch","data","json","current","is_human_vs_human","error","console","result","_opponents$currentOpp","split","changeOpponent","aiType","method","headers","body","JSON","stringify","ai_type","resetGame","isValidMove","makeLocalMove","player","newBoard","handleClick","log","nextPlayer","nextPlayerName","column","status","ok","Error","current_player","game_over","winning_line","_opponents$currentOpp2","_opponents$currentOpp3","opponentName","getAIMove","_opponents$currentOpp4","aiThinkingTimer","setTimeout","clearTimeout","isWinningCell","some","r","c","getCellColor","cellValue","baseColor","getTurnIndicator","className","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","Object","entries","key","description","from","length","_","colIndex","onClick","style","minHeight","rowIndex","_c","$RefreshReg$"],"sources":["/Users/vincentng/Documents/170/connect_4/frontend/src/Connect4Board.jsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\n\nconst ROWS = 6;\nconst COLS = 7;\n\nexport default function Connect4Board() {\n  const [board, setBoard] = useState(Array(ROWS).fill(null).map(() => Array(COLS).fill(0)));\n  const [playerTurn, setPlayerTurn] = useState(true);\n  const [currentPlayer, setCurrentPlayer] = useState(1);\n  const [gameOver, setGameOver] = useState(false);\n  const [winner, setWinner] = useState(null);\n  const [message, setMessage] = useState(\"Choose your opponent and click a column to start!\");\n  const [winningLine, setWinningLine] = useState(null);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [opponents, setOpponents] = useState({});\n  const [selectedOpponent, setSelectedOpponent] = useState(\"alphaBetaAI\");\n  const [currentOpponent, setCurrentOpponent] = useState(\"alphaBetaAI\");\n  const [isHumanVsHuman, setIsHumanVsHuman] = useState(false);\n  const [isProcessingMove, setIsProcessingMove] = useState(false);\n\n  // Client-side win detection as a backup\n  const checkWinner = useCallback((board) => {\n    // Check horizontal\n    for (let row = 0; row < ROWS; row++) {\n      for (let col = 0; col < COLS - 3; col++) {\n        const piece = board[row][col];\n        if (piece !== 0 && \n            piece === board[row][col + 1] && \n            piece === board[row][col + 2] && \n            piece === board[row][col + 3]) {\n          return {\n            winner: piece,\n            line: [[row, col], [row, col + 1], [row, col + 2], [row, col + 3]]\n          };\n        }\n      }\n    }\n\n    // Check vertical\n    for (let row = 0; row < ROWS - 3; row++) {\n      for (let col = 0; col < COLS; col++) {\n        const piece = board[row][col];\n        if (piece !== 0 && \n            piece === board[row + 1][col] && \n            piece === board[row + 2][col] && \n            piece === board[row + 3][col]) {\n          return {\n            winner: piece,\n            line: [[row, col], [row + 1, col], [row + 2, col], [row + 3, col]]\n          };\n        }\n      }\n    }\n\n    // Check diagonal (top-left to bottom-right)\n    for (let row = 0; row < ROWS - 3; row++) {\n      for (let col = 0; col < COLS - 3; col++) {\n        const piece = board[row][col];\n        if (piece !== 0 && \n            piece === board[row + 1][col + 1] && \n            piece === board[row + 2][col + 2] && \n            piece === board[row + 3][col + 3]) {\n          return {\n            winner: piece,\n            line: [[row, col], [row + 1, col + 1], [row + 2, col + 2], [row + 3, col + 3]]\n          };\n        }\n      }\n    }\n\n    // Check diagonal (bottom-left to top-right)\n    for (let row = 3; row < ROWS; row++) {\n      for (let col = 0; col < COLS - 3; col++) {\n        const piece = board[row][col];\n        if (piece !== 0 && \n            piece === board[row - 1][col + 1] && \n            piece === board[row - 2][col + 2] && \n            piece === board[row - 3][col + 3]) {\n          return {\n            winner: piece,\n            line: [[row, col], [row - 1, col + 1], [row - 2, col + 2], [row - 3, col + 3]]\n          };\n        }\n      }\n    }\n\n    // Check for tie\n    const isTie = board.every(row => row.every(cell => cell !== 0));\n    if (isTie) {\n      return { winner: 0, line: null }; // 0 represents tie\n    }\n\n    return null;\n  }, []);\n\n  // Load available opponents when component mounts\n  useEffect(() => {\n    const loadOpponents = async () => {\n      try {\n        const res = await fetch('http://localhost:5001/get-opponents');\n        const data = await res.json();\n        setOpponents(data.opponents);\n        setCurrentOpponent(data.current);\n        setSelectedOpponent(data.current);\n        setIsHumanVsHuman(data.is_human_vs_human || false);\n      } catch (error) {\n        console.error(\"Error loading opponents:\", error);\n        // Fallback opponents if backend is not available\n        setOpponents({\n          \"human\": \"Local 2-Player\",\n          \"randomAI\": \"Random AI - Easy\",\n          \"alphaBetaAI\": \"Alpha-Beta AI - Hard\"\n        });\n      }\n    };\n    loadOpponents();\n  }, []);\n\n  // Client-side validation after each move\n  useEffect(() => {\n    if (gameStarted && !gameOver) {\n      const result = checkWinner(board);\n      if (result) {\n        setGameOver(true);\n        setWinner(result.winner);\n        setWinningLine(result.line);\n        \n        if (result.winner === 1) {\n          setMessage(\"Player 1 (Red) Wins! 🎉\");\n        } else if (result.winner === 2) {\n          if (isHumanVsHuman) {\n            setMessage(\"Player 2 (Yellow) Wins! 🎉\");\n          } else {\n            setMessage(`${opponents[currentOpponent]?.split(' ')[0] || 'AI'} Wins! 🤖`);\n          }\n        } else {\n          setMessage(\"It's a Tie! 🤝\");\n        }\n      }\n    }\n  }, [board, gameStarted, gameOver, checkWinner, isHumanVsHuman, opponents, currentOpponent]);\n\n  // Function to change opponent\n  const changeOpponent = async (aiType) => {\n    if (gameStarted) {\n      setMessage(\"Cannot change opponent after game has started!\");\n      return;\n    }\n\n    try {\n      const res = await fetch('http://localhost:5001/set-opponent', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ ai_type: aiType })\n      });\n\n      const data = await res.json();\n      if (data.error) {\n        setMessage(data.error);\n      } else {\n        setCurrentOpponent(aiType);\n        setSelectedOpponent(aiType);\n        setIsHumanVsHuman(data.is_human_vs_human || false);\n        \n        if (data.is_human_vs_human) {\n          setMessage(\"Local 2-Player mode! Player 1 (red) starts. Click a column!\");\n        } else {\n          setMessage(`Now playing against ${opponents[aiType]}. Click a column to start!`);\n        }\n      }\n    } catch (error) {\n      console.error(\"Error changing opponent:\", error);\n      // Handle offline mode\n      if (aiType === \"human\") {\n        setIsHumanVsHuman(true);\n        setMessage(\"Local 2-Player mode! Player 1 (red) starts. Click a column!\");\n      } else {\n        setMessage(\"Error changing opponent - backend not available\");\n      }\n    }\n  };\n\n  // Function to reset the game state\n  const resetGame = async () => {\n    try {\n      const res = await fetch('http://localhost:5001/reset', { method: 'POST' });\n      const data = await res.json();\n      \n      setBoard(Array(ROWS).fill(null).map(() => Array(COLS).fill(0)));\n      setPlayerTurn(true);\n      setCurrentPlayer(1);\n      setGameOver(false);\n      setWinner(null);\n      setWinningLine(null);\n      setGameStarted(false);\n      setIsProcessingMove(false);\n      setIsHumanVsHuman(data.is_human_vs_human || false);\n      \n      if (data.is_human_vs_human) {\n        setMessage(\"Local 2-Player mode! Player 1 (red) starts. Click a column!\");\n      } else {\n        setMessage(\"Choose your opponent and click a column to start!\");\n      }\n    } catch (error) {\n      console.error(\"Error resetting game:\", error);\n      // Reset frontend state even if backend reset fails\n      setBoard(Array(ROWS).fill(null).map(() => Array(COLS).fill(0)));\n      setPlayerTurn(true);\n      setCurrentPlayer(1);\n      setGameOver(false);\n      setWinner(null);\n      setWinningLine(null);\n      setGameStarted(false);\n      setIsProcessingMove(false);\n      setMessage(\"Game reset! (Backend may need manual restart)\");\n    }\n  };\n\n  // Client-side move validation\n  const isValidMove = (col) => {\n    return col >= 0 && col < COLS && board[0][col] === 0;\n  };\n\n  // Client-side move execution for local games\n  const makeLocalMove = (col, player) => {\n    if (!isValidMove(col)) return null;\n    \n    const newBoard = board.map(row => [...row]);\n    \n    // Find the lowest empty row in the column\n    for (let row = ROWS - 1; row >= 0; row--) {\n      if (newBoard[row][col] === 0) {\n        newBoard[row][col] = player;\n        return newBoard;\n      }\n    }\n    \n    return null;\n  };\n\n  const handleClick = async (col) => {\n    console.log(\"Column clicked:\", col);\n    console.log(\"Current player:\", currentPlayer);\n    console.log(\"Game over:\", gameOver);\n    console.log(\"Is human vs human:\", isHumanVsHuman);\n    console.log(\"Is processing move:\", isProcessingMove);\n    \n    if (gameOver || isProcessingMove) {\n      console.log(\"Click ignored - game over or processing\");\n      return;\n    }\n\n    if (!isValidMove(col)) {\n      setMessage(\"Column is full! Choose another column.\");\n      return;\n    }\n\n    // For human vs human, allow both players to click\n    // For human vs AI, only allow when it's player 1's turn\n    if (!isHumanVsHuman && !playerTurn) {\n      console.log(\"Click ignored - not player 1's turn in vs AI mode\");\n      return;\n    }\n\n    setIsProcessingMove(true);\n\n    // Set game as started on first move\n    if (!gameStarted) {\n      setGameStarted(true);\n    }\n\n    try {\n      if (isHumanVsHuman) {\n        // Handle local multiplayer\n        const newBoard = makeLocalMove(col, currentPlayer);\n        if (newBoard) {\n          setBoard(newBoard);\n          const nextPlayer = currentPlayer === 1 ? 2 : 1;\n          setCurrentPlayer(nextPlayer);\n          \n          // Check for win locally\n          const result = checkWinner(newBoard);\n          if (!result) {\n            const nextPlayerName = nextPlayer === 1 ? \"Player 1 (Red)\" : \"Player 2 (Yellow)\";\n            setMessage(`${nextPlayerName}, your turn!`);\n          }\n        }\n        setIsProcessingMove(false);\n      } else {\n        // Handle backend communication\n        if (isHumanVsHuman) {\n          setMessage(`Player ${currentPlayer === 1 ? 2 : 1} (${currentPlayer === 1 ? 'yellow' : 'red'}), your turn!`);\n        } else {\n          setMessage(\"Making your move...\");\n        }\n\n        console.log(\"Sending move to backend:\", col);\n        const res = await fetch('http://localhost:5001/move', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ column: col })\n        });\n\n        console.log(\"Response status:\", res.status);\n\n        if (!res.ok) {\n          throw new Error(`HTTP error! status: ${res.status}`);\n        }\n\n        const data = await res.json();\n        console.log(\"Response data:\", data);\n\n        if (data.error) {\n          setMessage(data.error);\n          setIsProcessingMove(false);\n          return;\n        }\n\n        setBoard(data.board);\n        setCurrentPlayer(data.current_player);\n\n        if (data.game_over) {\n          setGameOver(true);\n          setWinner(data.winner);\n          setWinningLine(data.winning_line);\n          \n          if (data.winner === 1) {\n            setMessage(\"Player 1 (Red) Wins! 🎉\");\n          } else if (data.winner === 2) {\n            if (isHumanVsHuman) {\n              setMessage(\"Player 2 (Yellow) Wins! 🎉\");\n            } else {\n              setMessage(`${opponents[currentOpponent]?.split(' ')[0] || 'AI'} Wins! 🤖`);\n            }\n          } else {\n            setMessage(\"It's a Tie! 🤝\");\n          }\n        } else {\n          if (!isHumanVsHuman) {\n            // In human vs AI mode, switch to AI's turn\n            setPlayerTurn(false);\n            const opponentName = opponents[currentOpponent]?.split(' ')[0] || 'AI';\n            setMessage(`${opponentName} is thinking...`);\n          }\n        }\n        setIsProcessingMove(false);\n      }\n    } catch (error) {\n      console.error(\"Error making human move:\", error);\n      setMessage(\"❌ Cannot connect to backend. Make sure Flask server is running on localhost:5001\");\n      setIsProcessingMove(false);\n    }\n  };\n\n  useEffect(() => {\n    // Only fetch AI move if it's AI's turn and game is not over and NOT human vs human\n    if (!playerTurn && !gameOver && !isHumanVsHuman && !isProcessingMove) {\n      const getAIMove = async () => {\n        setIsProcessingMove(true);\n        try {\n          const res = await fetch('http://localhost:5001/ai-move');\n          \n          if (!res.ok) {\n            throw new Error(`HTTP error! status: ${res.status}`);\n          }\n\n          const data = await res.json();\n\n          if (data.error) {\n            setMessage(data.error);\n            setIsProcessingMove(false);\n            return;\n          }\n          \n          setBoard(data.board);\n          setCurrentPlayer(data.current_player);\n\n          if (data.game_over) {\n            setGameOver(true);\n            setWinner(data.winner);\n            setWinningLine(data.winning_line);\n            if (data.winner === 1) setMessage(\"You Win! 🎉\");\n            else if (data.winner === 2) setMessage(`${opponents[currentOpponent]?.split(' ')[0] || 'AI'} Wins! 🤖`);\n            else setMessage(\"It's a Tie! 🤝\");\n          } else {\n            setPlayerTurn(true);\n            setMessage(\"It's your turn!\");\n          }\n        } catch (error) {\n          console.error(\"Error getting AI move:\", error);\n          setMessage(\"Error: Cannot connect to backend for AI move\");\n        }\n        setIsProcessingMove(false);\n      };\n      const aiThinkingTimer = setTimeout(getAIMove, 500);\n      return () => clearTimeout(aiThinkingTimer);\n    }\n  }, [playerTurn, gameOver, isHumanVsHuman, isProcessingMove, opponents, currentOpponent]);\n\n  // Function to check if a cell is part of the winning line\n  const isWinningCell = (row, col) => {\n    if (!winningLine) return false;\n    return winningLine.some(([r, c]) => r === row && c === col);\n  };\n\n  // Function to determine cell color based on player number\n  const getCellColor = (cellValue, row, col) => {\n    const baseColor = cellValue === 1 ? 'bg-red-500' : cellValue === 2 ? 'bg-yellow-400' : 'bg-white';\n    \n    if (isWinningCell(row, col)) {\n      return `${baseColor} ring-4 ring-white shadow-2xl animate-pulse`;\n    }\n    \n    return baseColor;\n  };\n\n  // Get appropriate turn indicator\n  const getTurnIndicator = () => {\n    if (gameOver) return \"\";\n    \n    if (isProcessingMove) return \"⏳\";\n    \n    if (isHumanVsHuman) {\n      return currentPlayer === 1 ? \"🔴\" : \"🟡\";\n    } else {\n      return playerTurn ? \"🔴\" : \"🤖\";\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col items-center justify-center min-h-screen bg-gradient-to-br from-blue-900 via-blue-800 to-purple-800 p-4 text-white\">\n      <h1 className=\"text-5xl font-bold mb-4 text-white drop-shadow-lg\">Connect 4</h1>\n      \n      {/* Opponent Selection Dropdown */}\n      {!gameStarted && (\n        <div className=\"mb-6 flex flex-col items-center\">\n          <label className=\"text-lg font-semibold mb-2\">Choose Your Opponent:</label>\n          <select \n            value={selectedOpponent}\n            onChange={(e) => {\n              setSelectedOpponent(e.target.value);\n              changeOpponent(e.target.value);\n            }}\n            className=\"bg-blue-700 text-white px-4 py-2 rounded-lg border border-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-400 text-center min-w-64\"\n          >\n            {Object.entries(opponents).map(([key, description]) => (\n              <option key={key} value={key}>\n                {description}\n              </option>\n            ))}\n          </select>\n        </div>\n      )}\n\n      {gameStarted && (\n        <div className=\"mb-4 text-lg text-blue-200\">\n          {isHumanVsHuman ? (\n            <>Playing: <span className=\"font-semibold text-white\">Local 2-Player</span></>\n          ) : (\n            <>Playing against: <span className=\"font-semibold text-white\">{opponents[currentOpponent]}</span></>\n          )}\n        </div>\n      )}\n      \n      <div className=\"mb-6 text-2xl font-semibold text-center min-h-8 flex items-center gap-2\">\n        <span>{getTurnIndicator()}</span>\n        <span>{message}</span>\n      </div>\n\n      <div className=\"relative\">\n        {/* Column click areas */}\n        <div className=\"absolute -top-16 left-0 right-0 h-16 flex z-10\">\n          {Array.from({ length: COLS }).map((_, colIndex) => (\n            <div\n              key={`click-${colIndex}`}\n              onClick={() => handleClick(colIndex)}\n              className={`flex-1 h-full transition-all duration-200 flex items-center justify-center ${\n                !gameOver && !isProcessingMove && isValidMove(colIndex)\n                  ? 'cursor-pointer hover:bg-white hover:bg-opacity-20 rounded-t-lg'\n                  : 'cursor-not-allowed opacity-50'\n              }`}\n              style={{ minHeight: '64px' }}\n            >\n              <div \n                className={`w-3 h-3 rounded-full opacity-0 hover:opacity-100 transition-opacity duration-200 ${\n                  isHumanVsHuman \n                    ? (currentPlayer === 1 ? 'bg-red-500' : 'bg-yellow-400')\n                    : 'bg-red-500'\n                }`} \n              />\n            </div>\n          ))}\n        </div>\n\n        {/* Game board */}\n        <div className=\"grid grid-cols-7 gap-2 p-4 bg-blue-600 rounded-2xl shadow-2xl border-4 border-blue-500\">\n          {board.map((row, rowIndex) => (\n            row.map((cell, colIndex) => (\n              <div\n                key={`${rowIndex}-${colIndex}`}\n                className=\"w-16 h-16 bg-blue-800 rounded-full flex items-center justify-center shadow-inner transition-colors duration-200\"\n              >\n                <div \n                  className={`w-12 h-12 rounded-full ${getCellColor(cell, rowIndex, colIndex)} shadow-lg transition-all duration-300 ease-out border-2 border-opacity-20 border-white`}\n                />\n              </div>\n            ))\n          ))}\n        </div>\n      </div>\n\n      {gameOver && (\n        <button\n          onClick={resetGame}\n          className=\"mt-8 px-8 py-4 bg-green-500 hover:bg-green-600 text-white font-bold text-xl rounded-xl shadow-lg transition-all duration-200 transform hover:scale-105\"\n        >\n          Play Again\n        </button>\n      )}\n\n      <div className=\"mt-6 text-sm text-blue-200 text-center\">\n        <p>Click on a column to drop your piece</p>\n        <p>Connect 4 pieces horizontally, vertically, or diagonally to win!</p>\n        {isHumanVsHuman && (\n          <p className=\"mt-1 font-semibold\">🔴 Player 1 (Red) vs 🟡 Player 2 (Yellow)</p>\n        )}\n      </div>\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}