{"ast":null,"code":"var _jsxFileName = \"/Users/vincentng/Documents/170/connect_4/frontend/src/Connect4Board.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ROWS = 6;\nconst COLS = 7;\n\n// API base URL - changes based on environment\nconst API_BASE_URL = process.env.NODE_ENV === 'production' ? '' // Use relative URLs in production (Vercel)\n: 'http://localhost:5001'; // Use localhost in development\n\nexport default function Connect4Board() {\n  _s();\n  const [board, setBoard] = useState(Array(ROWS).fill(null).map(() => Array(COLS).fill(0)));\n  const [playerTurn, setPlayerTurn] = useState(true);\n  const [currentPlayer, setCurrentPlayer] = useState(1);\n  const [gameOver, setGameOver] = useState(false);\n  const [winner, setWinner] = useState(null);\n  const [message, setMessage] = useState(\"Choose your opponent and click a column to start!\");\n  const [winningLine, setWinningLine] = useState(null);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [opponents, setOpponents] = useState({});\n  const [selectedOpponent, setSelectedOpponent] = useState(\"alphaBetaAI\");\n  const [currentOpponent, setCurrentOpponent] = useState(\"alphaBetaAI\");\n  const [isHumanVsHuman, setIsHumanVsHuman] = useState(false);\n\n  // Load available opponents when component mounts\n  useEffect(() => {\n    const loadOpponents = async () => {\n      try {\n        const res = await fetch(`${API_BASE_URL}/api/get-opponents`);\n        const data = await res.json();\n        setOpponents(data.opponents);\n        setCurrentOpponent(data.current);\n        setSelectedOpponent(data.current);\n        setIsHumanVsHuman(data.is_human_vs_human || false);\n      } catch (error) {\n        console.error(\"Error loading opponents:\", error);\n      }\n    };\n    loadOpponents();\n  }, []);\n\n  // Function to change opponent\n  const changeOpponent = async aiType => {\n    if (gameStarted) {\n      setMessage(\"Cannot change opponent after game has started!\");\n      return;\n    }\n    try {\n      const res = await fetch(`${API_BASE_URL}/api/set-opponent`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          ai_type: aiType\n        })\n      });\n      const data = await res.json();\n      if (data.error) {\n        setMessage(data.error);\n      } else {\n        setCurrentOpponent(aiType);\n        setSelectedOpponent(aiType);\n        setIsHumanVsHuman(data.is_human_vs_human || false);\n\n        // Reset game state when changing opponent\n        setPlayerTurn(true);\n        setCurrentPlayer(1);\n        if (data.is_human_vs_human) {\n          setMessage(\"Local 2-Player mode! Player 1 (red) starts. Click a column!\");\n        } else {\n          setMessage(`Now playing against ${opponents[aiType]}. Click a column to start!`);\n        }\n      }\n    } catch (error) {\n      console.error(\"Error changing opponent:\", error);\n      setMessage(\"Error changing opponent\");\n    }\n  };\n\n  // Function to reset the game state\n  const resetGame = async () => {\n    try {\n      const res = await fetch(`${API_BASE_URL}/api/reset`, {\n        method: 'POST'\n      });\n      const data = await res.json();\n      setBoard(Array(ROWS).fill(null).map(() => Array(COLS).fill(0)));\n      setPlayerTurn(true);\n      setCurrentPlayer(1);\n      setGameOver(false);\n      setWinner(null);\n      setWinningLine(null);\n      setGameStarted(false);\n      setIsHumanVsHuman(data.is_human_vs_human || false);\n      if (data.is_human_vs_human) {\n        setMessage(\"Local 2-Player mode! Player 1 (red) starts. Click a column!\");\n      } else {\n        setMessage(\"Choose your opponent and click a column to start!\");\n      }\n    } catch (error) {\n      console.error(\"Error resetting game:\", error);\n      // Reset frontend state even if backend reset fails\n      setBoard(Array(ROWS).fill(null).map(() => Array(COLS).fill(0)));\n      setPlayerTurn(true);\n      setCurrentPlayer(1);\n      setGameOver(false);\n      setWinner(null);\n      setWinningLine(null);\n      setGameStarted(false);\n      setMessage(\"Game reset! (Backend may need manual restart)\");\n    }\n  };\n  const handleClick = async col => {\n    console.log(\"Column clicked:\", col);\n    console.log(\"Current player:\", currentPlayer);\n    console.log(\"Game over:\", gameOver);\n    console.log(\"Is human vs human:\", isHumanVsHuman);\n    if (gameOver) {\n      console.log(\"Click ignored - game over\");\n      return;\n    }\n\n    // For human vs human, allow both players to click\n    // For human vs AI, only allow when it's player 1's turn\n    if (!isHumanVsHuman && !playerTurn) {\n      console.log(\"Click ignored - not player 1's turn in vs AI mode\");\n      return;\n    }\n\n    // Set game as started on first move\n    if (!gameStarted) {\n      setGameStarted(true);\n    }\n    if (isHumanVsHuman) {\n      setMessage(`Player ${currentPlayer === 1 ? 2 : 1} (${currentPlayer === 1 ? 'yellow' : 'red'}), your turn!`);\n    } else {\n      setMessage(\"Making your move...\");\n    }\n    try {\n      console.log(\"Sending move to backend:\", col);\n      const res = await fetch(`${API_BASE_URL}/api/move`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          column: col\n        })\n      });\n      console.log(\"Response status:\", res.status);\n      if (!res.ok) {\n        throw new Error(`HTTP error! status: ${res.status}`);\n      }\n      const data = await res.json();\n      console.log(\"Response data:\", data);\n      if (data.error) {\n        // Handle specific game errors (like column full) without showing connection error\n        if (data.error.includes(\"full\") || data.error.includes(\"invalid\")) {\n          setMessage(data.error);\n        } else {\n          setMessage(\"❌ Game error: \" + data.error);\n        }\n        return;\n      }\n      setBoard(data.board);\n      setCurrentPlayer(data.current_player);\n      if (data.game_over) {\n        setGameOver(true);\n        setWinner(data.winner);\n        setWinningLine(data.winning_line);\n        if (data.winner === 1) {\n          setMessage(\"Player 1 (Red) Wins! 🎉\");\n        } else if (data.winner === 2) {\n          if (isHumanVsHuman) {\n            setMessage(\"Player 2 (Yellow) Wins! 🎉\");\n          } else {\n            var _opponents$currentOpp;\n            setMessage(`${((_opponents$currentOpp = opponents[currentOpponent]) === null || _opponents$currentOpp === void 0 ? void 0 : _opponents$currentOpp.split(' ')[0]) || 'AI'} Wins! 🤖`);\n          }\n        } else {\n          setMessage(\"It's a Tie! 🤝\");\n        }\n      } else {\n        if (isHumanVsHuman) {\n          // In human vs human, both players click, so just update the message\n          const nextPlayerName = data.current_player === 1 ? \"Player 1 (Red)\" : \"Player 2 (Yellow)\";\n          setMessage(`${nextPlayerName}, your turn!`);\n          setPlayerTurn(true); // Always allow clicking in human vs human\n        } else {\n          var _opponents$currentOpp2;\n          // In human vs AI mode, switch to AI's turn\n          setPlayerTurn(false);\n          const opponentName = ((_opponents$currentOpp2 = opponents[currentOpponent]) === null || _opponents$currentOpp2 === void 0 ? void 0 : _opponents$currentOpp2.split(' ')[0]) || 'AI';\n          setMessage(`${opponentName} is thinking...`);\n        }\n      }\n    } catch (error) {\n      console.error(\"Error making human move:\", error);\n      // Only show connection error for actual network/connection issues\n      setMessage(\"❌ Cannot connect to backend. Make sure Flask server is running on localhost:5001\");\n    }\n  };\n  useEffect(() => {\n    // Only fetch AI move if it's AI's turn and game is not over and NOT human vs human and game has started\n    if (!playerTurn && !gameOver && !isHumanVsHuman && gameStarted) {\n      const getAIMove = async () => {\n        try {\n          const res = await fetch(`${API_BASE_URL}/api/ai-move`);\n          if (!res.ok) {\n            throw new Error(`HTTP error! status: ${res.status}`);\n          }\n          const data = await res.json();\n          if (data.error) {\n            // Handle AI move errors gracefully\n            console.error(\"AI move error:\", data.error);\n            setMessage(\"AI move error: \" + data.error);\n            // Reset to player turn to prevent getting stuck\n            setPlayerTurn(true);\n            return;\n          }\n          setBoard(data.board);\n          setCurrentPlayer(data.current_player);\n          if (data.game_over) {\n            var _opponents$currentOpp3;\n            setGameOver(true);\n            setWinner(data.winner);\n            setWinningLine(data.winning_line);\n            if (data.winner === 1) setMessage(\"You Win! 🎉\");else if (data.winner === 2) setMessage(`${((_opponents$currentOpp3 = opponents[currentOpponent]) === null || _opponents$currentOpp3 === void 0 ? void 0 : _opponents$currentOpp3.split(' ')[0]) || 'AI'} Wins! 🤖`);else setMessage(\"It's a Tie! 🤝\");\n          } else {\n            setPlayerTurn(true);\n            setMessage(\"It's your turn!\");\n          }\n        } catch (error) {\n          console.error(\"Error getting AI move:\", error);\n          setMessage(\"Error: Cannot connect to backend for AI move\");\n          // Reset to player turn to prevent getting stuck\n          setPlayerTurn(true);\n        }\n      };\n      const aiThinkingTimer = setTimeout(getAIMove, 500);\n      return () => clearTimeout(aiThinkingTimer);\n    }\n  }, [playerTurn, gameOver, isHumanVsHuman, gameStarted, currentOpponent]);\n\n  // Function to check if a cell is part of the winning line\n  const isWinningCell = (row, col) => {\n    if (!winningLine) return false;\n    return winningLine.some(([r, c]) => r === row && c === col);\n  };\n\n  // Function to determine cell color based on player number\n  const getCellColor = (cellValue, row, col) => {\n    const baseColor = cellValue === 1 ? 'bg-red-500' : cellValue === 2 ? 'bg-yellow-400' : 'bg-white';\n    if (isWinningCell(row, col)) {\n      return `${baseColor} ring-4 ring-white shadow-2xl`;\n    }\n    return baseColor;\n  };\n\n  // Get appropriate turn indicator\n  const getTurnIndicator = () => {\n    if (gameOver) return \"\";\n    if (isHumanVsHuman) {\n      return currentPlayer === 1 ? \"🔴\" : \"🟡\";\n    } else {\n      return playerTurn ? \"🔴\" : \"🤖\";\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center justify-center min-h-screen bg-gradient-to-br from-blue-900 via-blue-800 to-purple-800 p-4 text-white\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-5xl font-bold mb-4 text-white drop-shadow-lg\",\n      children: \"Connect 4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 7\n    }, this), !gameStarted && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-6 flex flex-col items-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"text-lg font-semibold mb-2\",\n        children: \"Choose Your Opponent:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedOpponent,\n        onChange: e => {\n          setSelectedOpponent(e.target.value);\n          changeOpponent(e.target.value);\n        },\n        className: \"bg-blue-700 text-white px-4 py-2 rounded-lg border border-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-400 text-center min-w-64\",\n        children: Object.entries(opponents).map(([key, description]) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: key,\n          children: description\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 9\n    }, this), gameStarted && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-4 text-lg text-blue-200\",\n      children: isHumanVsHuman ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [\"Playing: \", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"font-semibold text-white\",\n          children: \"Local 2-Player\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 24\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [\"Playing against: \", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"font-semibold text-white\",\n          children: opponents[currentOpponent]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 32\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-6 text-2xl font-semibold text-center min-h-8 flex items-center gap-2\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: getTurnIndicator()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"relative\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"absolute -top-16 left-0 right-0 h-16 flex z-10\",\n        children: Array.from({\n          length: COLS\n        }).map((_, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          onClick: () => handleClick(colIndex),\n          className: \"flex-1 h-full cursor-pointer hover:bg-white hover:bg-opacity-20 rounded-t-lg transition-all duration-200 flex items-center justify-center\",\n          style: {\n            minHeight: '64px'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `w-3 h-3 rounded-full opacity-0 hover:opacity-100 transition-opacity duration-200 ${isHumanVsHuman ? currentPlayer === 1 ? 'bg-red-500' : 'bg-yellow-400' : 'bg-red-500'}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 335,\n            columnNumber: 15\n          }, this)\n        }, `click-${colIndex}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-7 gap-2 p-4 bg-blue-600 rounded-2xl shadow-2xl border-4 border-blue-500\",\n        children: board.map((row, rowIndex) => row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          onClick: () => handleClick(colIndex),\n          className: \"w-16 h-16 bg-blue-800 rounded-full flex items-center justify-center shadow-inner cursor-pointer hover:bg-blue-700 transition-colors duration-200\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `w-12 h-12 rounded-full ${getCellColor(cell, rowIndex, colIndex)} shadow-lg transition-all duration-300 ease-out border-2 border-opacity-20 border-white`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 355,\n            columnNumber: 17\n          }, this)\n        }, `${rowIndex}-${colIndex}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 15\n        }, this)))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 7\n    }, this), gameOver && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: resetGame,\n      className: \"mt-8 px-8 py-4 bg-green-500 hover:bg-green-600 text-white font-bold text-xl rounded-xl shadow-lg transition-all duration-200 transform hover:scale-105\",\n      children: \"Play Again\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-6 text-sm text-blue-200 text-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Click on a column to drop your piece\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Connect 4 pieces horizontally, vertically, or diagonally to win!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 9\n      }, this), isHumanVsHuman && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"mt-1 font-semibold\",\n        children: \"\\uD83D\\uDD34 Player 1 (Red) vs \\uD83D\\uDFE1 Player 2 (Yellow)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 373,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 286,\n    columnNumber: 5\n  }, this);\n}\n_s(Connect4Board, \"zRSNdcigBPSvstJNN8OZUSmYz8c=\");\n_c = Connect4Board;\nvar _c;\n$RefreshReg$(_c, \"Connect4Board\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","ROWS","COLS","API_BASE_URL","process","env","NODE_ENV","Connect4Board","_s","board","setBoard","Array","fill","map","playerTurn","setPlayerTurn","currentPlayer","setCurrentPlayer","gameOver","setGameOver","winner","setWinner","message","setMessage","winningLine","setWinningLine","gameStarted","setGameStarted","opponents","setOpponents","selectedOpponent","setSelectedOpponent","currentOpponent","setCurrentOpponent","isHumanVsHuman","setIsHumanVsHuman","loadOpponents","res","fetch","data","json","current","is_human_vs_human","error","console","changeOpponent","aiType","method","headers","body","JSON","stringify","ai_type","resetGame","handleClick","col","log","column","status","ok","Error","includes","current_player","game_over","winning_line","_opponents$currentOpp","split","nextPlayerName","_opponents$currentOpp2","opponentName","getAIMove","_opponents$currentOpp3","aiThinkingTimer","setTimeout","clearTimeout","isWinningCell","row","some","r","c","getCellColor","cellValue","baseColor","getTurnIndicator","className","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","Object","entries","key","description","from","length","_","colIndex","onClick","style","minHeight","rowIndex","cell","_c","$RefreshReg$"],"sources":["/Users/vincentng/Documents/170/connect_4/frontend/src/Connect4Board.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst ROWS = 6;\nconst COLS = 7;\n\n// API base URL - changes based on environment\nconst API_BASE_URL = process.env.NODE_ENV === 'production' \n  ? '' // Use relative URLs in production (Vercel)\n  : 'http://localhost:5001'; // Use localhost in development\n\nexport default function Connect4Board() {\n  const [board, setBoard] = useState(Array(ROWS).fill(null).map(() => Array(COLS).fill(0)));\n  const [playerTurn, setPlayerTurn] = useState(true);\n  const [currentPlayer, setCurrentPlayer] = useState(1);\n  const [gameOver, setGameOver] = useState(false);\n  const [winner, setWinner] = useState(null);\n  const [message, setMessage] = useState(\"Choose your opponent and click a column to start!\");\n  const [winningLine, setWinningLine] = useState(null);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [opponents, setOpponents] = useState({});\n  const [selectedOpponent, setSelectedOpponent] = useState(\"alphaBetaAI\");\n  const [currentOpponent, setCurrentOpponent] = useState(\"alphaBetaAI\");\n  const [isHumanVsHuman, setIsHumanVsHuman] = useState(false);\n\n  // Load available opponents when component mounts\n  useEffect(() => {\n    const loadOpponents = async () => {\n      try {\n        const res = await fetch(`${API_BASE_URL}/api/get-opponents`);\n        const data = await res.json();\n        setOpponents(data.opponents);\n        setCurrentOpponent(data.current);\n        setSelectedOpponent(data.current);\n        setIsHumanVsHuman(data.is_human_vs_human || false);\n      } catch (error) {\n        console.error(\"Error loading opponents:\", error);\n      }\n    };\n    loadOpponents();\n  }, []);\n\n  // Function to change opponent\n  const changeOpponent = async (aiType) => {\n    if (gameStarted) {\n      setMessage(\"Cannot change opponent after game has started!\");\n      return;\n    }\n\n    try {\n      const res = await fetch(`${API_BASE_URL}/api/set-opponent`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ ai_type: aiType })\n      });\n\n      const data = await res.json();\n      if (data.error) {\n        setMessage(data.error);\n      } else {\n        setCurrentOpponent(aiType);\n        setSelectedOpponent(aiType);\n        setIsHumanVsHuman(data.is_human_vs_human || false);\n        \n        // Reset game state when changing opponent\n        setPlayerTurn(true);\n        setCurrentPlayer(1);\n        \n        if (data.is_human_vs_human) {\n          setMessage(\"Local 2-Player mode! Player 1 (red) starts. Click a column!\");\n        } else {\n          setMessage(`Now playing against ${opponents[aiType]}. Click a column to start!`);\n        }\n      }\n    } catch (error) {\n      console.error(\"Error changing opponent:\", error);\n      setMessage(\"Error changing opponent\");\n    }\n  };\n\n  // Function to reset the game state\n  const resetGame = async () => {\n    try {\n      const res = await fetch(`${API_BASE_URL}/api/reset`, { method: 'POST' });\n      const data = await res.json();\n      \n      setBoard(Array(ROWS).fill(null).map(() => Array(COLS).fill(0)));\n      setPlayerTurn(true);\n      setCurrentPlayer(1);\n      setGameOver(false);\n      setWinner(null);\n      setWinningLine(null);\n      setGameStarted(false);\n      setIsHumanVsHuman(data.is_human_vs_human || false);\n      \n      if (data.is_human_vs_human) {\n        setMessage(\"Local 2-Player mode! Player 1 (red) starts. Click a column!\");\n      } else {\n        setMessage(\"Choose your opponent and click a column to start!\");\n      }\n    } catch (error) {\n      console.error(\"Error resetting game:\", error);\n      // Reset frontend state even if backend reset fails\n      setBoard(Array(ROWS).fill(null).map(() => Array(COLS).fill(0)));\n      setPlayerTurn(true);\n      setCurrentPlayer(1);\n      setGameOver(false);\n      setWinner(null);\n      setWinningLine(null);\n      setGameStarted(false);\n      setMessage(\"Game reset! (Backend may need manual restart)\");\n    }\n  };\n\n  const handleClick = async (col) => {\n    console.log(\"Column clicked:\", col);\n    console.log(\"Current player:\", currentPlayer);\n    console.log(\"Game over:\", gameOver);\n    console.log(\"Is human vs human:\", isHumanVsHuman);\n    \n    if (gameOver) {\n      console.log(\"Click ignored - game over\");\n      return;\n    }\n\n    // For human vs human, allow both players to click\n    // For human vs AI, only allow when it's player 1's turn\n    if (!isHumanVsHuman && !playerTurn) {\n      console.log(\"Click ignored - not player 1's turn in vs AI mode\");\n      return;\n    }\n\n    // Set game as started on first move\n    if (!gameStarted) {\n      setGameStarted(true);\n    }\n\n    if (isHumanVsHuman) {\n      setMessage(`Player ${currentPlayer === 1 ? 2 : 1} (${currentPlayer === 1 ? 'yellow' : 'red'}), your turn!`);\n    } else {\n      setMessage(\"Making your move...\");\n    }\n\n    try {\n      console.log(\"Sending move to backend:\", col);\n      const res = await fetch(`${API_BASE_URL}/api/move`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ column: col })\n      });\n\n      console.log(\"Response status:\", res.status);\n\n      if (!res.ok) {\n        throw new Error(`HTTP error! status: ${res.status}`);\n      }\n\n      const data = await res.json();\n      console.log(\"Response data:\", data);\n\n      if (data.error) {\n        // Handle specific game errors (like column full) without showing connection error\n        if (data.error.includes(\"full\") || data.error.includes(\"invalid\")) {\n          setMessage(data.error);\n        } else {\n          setMessage(\"❌ Game error: \" + data.error);\n        }\n        return;\n      }\n\n      setBoard(data.board);\n      setCurrentPlayer(data.current_player);\n\n      if (data.game_over) {\n        setGameOver(true);\n        setWinner(data.winner);\n        setWinningLine(data.winning_line);\n        \n        if (data.winner === 1) {\n          setMessage(\"Player 1 (Red) Wins! 🎉\");\n        } else if (data.winner === 2) {\n          if (isHumanVsHuman) {\n            setMessage(\"Player 2 (Yellow) Wins! 🎉\");\n          } else {\n            setMessage(`${opponents[currentOpponent]?.split(' ')[0] || 'AI'} Wins! 🤖`);\n          }\n        } else {\n          setMessage(\"It's a Tie! 🤝\");\n        }\n      } else {\n        if (isHumanVsHuman) {\n          // In human vs human, both players click, so just update the message\n          const nextPlayerName = data.current_player === 1 ? \"Player 1 (Red)\" : \"Player 2 (Yellow)\";\n          setMessage(`${nextPlayerName}, your turn!`);\n          setPlayerTurn(true); // Always allow clicking in human vs human\n        } else {\n          // In human vs AI mode, switch to AI's turn\n          setPlayerTurn(false);\n          const opponentName = opponents[currentOpponent]?.split(' ')[0] || 'AI';\n          setMessage(`${opponentName} is thinking...`);\n        }\n      }\n    } catch (error) {\n      console.error(\"Error making human move:\", error);\n      // Only show connection error for actual network/connection issues\n      setMessage(\"❌ Cannot connect to backend. Make sure Flask server is running on localhost:5001\");\n    }\n  };\n\n  useEffect(() => {\n    // Only fetch AI move if it's AI's turn and game is not over and NOT human vs human and game has started\n    if (!playerTurn && !gameOver && !isHumanVsHuman && gameStarted) {\n      const getAIMove = async () => {\n        try {\n          const res = await fetch(`${API_BASE_URL}/api/ai-move`);\n          \n          if (!res.ok) {\n            throw new Error(`HTTP error! status: ${res.status}`);\n          }\n\n          const data = await res.json();\n\n          if (data.error) {\n            // Handle AI move errors gracefully\n            console.error(\"AI move error:\", data.error);\n            setMessage(\"AI move error: \" + data.error);\n            // Reset to player turn to prevent getting stuck\n            setPlayerTurn(true);\n            return;\n          }\n          \n          setBoard(data.board);\n          setCurrentPlayer(data.current_player);\n\n          if (data.game_over) {\n            setGameOver(true);\n            setWinner(data.winner);\n            setWinningLine(data.winning_line);\n            if (data.winner === 1) setMessage(\"You Win! 🎉\");\n            else if (data.winner === 2) setMessage(`${opponents[currentOpponent]?.split(' ')[0] || 'AI'} Wins! 🤖`);\n            else setMessage(\"It's a Tie! 🤝\");\n          } else {\n            setPlayerTurn(true);\n            setMessage(\"It's your turn!\");\n          }\n        } catch (error) {\n          console.error(\"Error getting AI move:\", error);\n          setMessage(\"Error: Cannot connect to backend for AI move\");\n          // Reset to player turn to prevent getting stuck\n          setPlayerTurn(true);\n        }\n      };\n      const aiThinkingTimer = setTimeout(getAIMove, 500);\n      return () => clearTimeout(aiThinkingTimer);\n    }\n  }, [playerTurn, gameOver, isHumanVsHuman, gameStarted, currentOpponent]);\n\n  // Function to check if a cell is part of the winning line\n  const isWinningCell = (row, col) => {\n    if (!winningLine) return false;\n    return winningLine.some(([r, c]) => r === row && c === col);\n  };\n\n  // Function to determine cell color based on player number\n  const getCellColor = (cellValue, row, col) => {\n    const baseColor = cellValue === 1 ? 'bg-red-500' : cellValue === 2 ? 'bg-yellow-400' : 'bg-white';\n    \n    if (isWinningCell(row, col)) {\n      return `${baseColor} ring-4 ring-white shadow-2xl`;\n    }\n    \n    return baseColor;\n  };\n\n  // Get appropriate turn indicator\n  const getTurnIndicator = () => {\n    if (gameOver) return \"\";\n    \n    if (isHumanVsHuman) {\n      return currentPlayer === 1 ? \"🔴\" : \"🟡\";\n    } else {\n      return playerTurn ? \"🔴\" : \"🤖\";\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col items-center justify-center min-h-screen bg-gradient-to-br from-blue-900 via-blue-800 to-purple-800 p-4 text-white\">\n      <h1 className=\"text-5xl font-bold mb-4 text-white drop-shadow-lg\">Connect 4</h1>\n      \n      {/* Opponent Selection Dropdown */}\n      {!gameStarted && (\n        <div className=\"mb-6 flex flex-col items-center\">\n          <label className=\"text-lg font-semibold mb-2\">Choose Your Opponent:</label>\n          <select \n            value={selectedOpponent}\n            onChange={(e) => {\n              setSelectedOpponent(e.target.value);\n              changeOpponent(e.target.value);\n            }}\n            className=\"bg-blue-700 text-white px-4 py-2 rounded-lg border border-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-400 text-center min-w-64\"\n          >\n            {Object.entries(opponents).map(([key, description]) => (\n              <option key={key} value={key}>\n                {description}\n              </option>\n            ))}\n          </select>\n        </div>\n      )}\n\n      {gameStarted && (\n        <div className=\"mb-4 text-lg text-blue-200\">\n          {isHumanVsHuman ? (\n            <>Playing: <span className=\"font-semibold text-white\">Local 2-Player</span></>\n          ) : (\n            <>Playing against: <span className=\"font-semibold text-white\">{opponents[currentOpponent]}</span></>\n          )}\n        </div>\n      )}\n      \n      <div className=\"mb-6 text-2xl font-semibold text-center min-h-8 flex items-center gap-2\">\n        <span>{getTurnIndicator()}</span>\n        <span>{message}</span>\n      </div>\n\n      <div className=\"relative\">\n        {/* Column click areas */}\n        <div className=\"absolute -top-16 left-0 right-0 h-16 flex z-10\">\n          {Array.from({ length: COLS }).map((_, colIndex) => (\n            <div\n              key={`click-${colIndex}`}\n              onClick={() => handleClick(colIndex)}\n              className=\"flex-1 h-full cursor-pointer hover:bg-white hover:bg-opacity-20 rounded-t-lg transition-all duration-200 flex items-center justify-center\"\n              style={{ minHeight: '64px' }}\n            >\n              <div \n                className={`w-3 h-3 rounded-full opacity-0 hover:opacity-100 transition-opacity duration-200 ${\n                  isHumanVsHuman \n                    ? (currentPlayer === 1 ? 'bg-red-500' : 'bg-yellow-400')\n                    : 'bg-red-500'\n                }`} \n              />\n            </div>\n          ))}\n        </div>\n\n        {/* Game board */}\n        <div className=\"grid grid-cols-7 gap-2 p-4 bg-blue-600 rounded-2xl shadow-2xl border-4 border-blue-500\">\n          {board.map((row, rowIndex) => (\n            row.map((cell, colIndex) => (\n              <div\n                key={`${rowIndex}-${colIndex}`}\n                onClick={() => handleClick(colIndex)}\n                className=\"w-16 h-16 bg-blue-800 rounded-full flex items-center justify-center shadow-inner cursor-pointer hover:bg-blue-700 transition-colors duration-200\"\n              >\n                <div \n                  className={`w-12 h-12 rounded-full ${getCellColor(cell, rowIndex, colIndex)} shadow-lg transition-all duration-300 ease-out border-2 border-opacity-20 border-white`}\n                />\n              </div>\n            ))\n          ))}\n        </div>\n      </div>\n\n      {gameOver && (\n        <button\n          onClick={resetGame}\n          className=\"mt-8 px-8 py-4 bg-green-500 hover:bg-green-600 text-white font-bold text-xl rounded-xl shadow-lg transition-all duration-200 transform hover:scale-105\"\n        >\n          Play Again\n        </button>\n      )}\n\n      <div className=\"mt-6 text-sm text-blue-200 text-center\">\n        <p>Click on a column to drop your piece</p>\n        <p>Connect 4 pieces horizontally, vertically, or diagonally to win!</p>\n        {isHumanVsHuman && (\n          <p className=\"mt-1 font-semibold\">🔴 Player 1 (Red) vs 🟡 Player 2 (Yellow)</p>\n        )}\n      </div>\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}