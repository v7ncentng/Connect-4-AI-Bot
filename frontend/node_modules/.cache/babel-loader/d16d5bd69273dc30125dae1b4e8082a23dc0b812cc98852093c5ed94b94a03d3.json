{"ast":null,"code":"var _jsxFileName = \"/Users/vincentng/Documents/170/connect_4/frontend/src/Connect4Board.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ROWS = 6;\nconst COLS = 7;\nexport default function Connect4Board() {\n  _s();\n  // Initialize board with 0s (empty) to match Python backend\n  const [board, setBoard] = useState(Array(ROWS).fill(null).map(() => Array(COLS).fill(0)));\n  const [playerTurn, setPlayerTurn] = useState(true); // true for human (Player 1), false for AI (Player 2)\n  const [gameOver, setGameOver] = useState(false);\n  const [winner, setWinner] = useState(null); // null, 0 (tie), 1 (Player 1), 2 (Player 2)\n  const [message, setMessage] = useState(\"Choose your opponent and click a column to start!\");\n  const [winningLine, setWinningLine] = useState(null);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [opponents, setOpponents] = useState({});\n  const [selectedOpponent, setSelectedOpponent] = useState(\"alphaBetaAI\");\n  const [currentOpponent, setCurrentOpponent] = useState(\"alphaBetaAI\");\n\n  // Load available opponents when component mounts\n  useEffect(() => {\n    const loadOpponents = async () => {\n      try {\n        const res = await fetch('http://localhost:5001/get-opponents');\n        const data = await res.json();\n        setOpponents(data.opponents);\n        setCurrentOpponent(data.current);\n        setSelectedOpponent(data.current);\n      } catch (error) {\n        console.error(\"Error loading opponents:\", error);\n      }\n    };\n    loadOpponents();\n  }, []);\n\n  // Function to change opponent\n  const changeOpponent = async aiType => {\n    if (gameStarted) {\n      setMessage(\"Cannot change opponent after game has started!\");\n      return;\n    }\n    try {\n      const res = await fetch('http://localhost:5001/set-opponent', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          ai_type: aiType\n        })\n      });\n      const data = await res.json();\n      if (data.error) {\n        setMessage(data.error);\n      } else {\n        setCurrentOpponent(aiType);\n        setSelectedOpponent(aiType);\n        setMessage(`Now playing against ${opponents[aiType]}. Click a column to start!`);\n      }\n    } catch (error) {\n      console.error(\"Error changing opponent:\", error);\n      setMessage(\"Error changing opponent\");\n    }\n  };\n\n  // Function to reset the game state\n  const resetGame = async () => {\n    try {\n      await fetch('http://localhost:5001/reset', {\n        method: 'POST'\n      });\n      setBoard(Array(ROWS).fill(null).map(() => Array(COLS).fill(0)));\n      setPlayerTurn(true);\n      setGameOver(false);\n      setWinner(null);\n      setWinningLine(null);\n      setGameStarted(false);\n      setMessage(\"Choose your opponent and click a column to start!\");\n    } catch (error) {\n      console.error(\"Error resetting game:\", error);\n      // Reset frontend state even if backend reset fails\n      setBoard(Array(ROWS).fill(null).map(() => Array(COLS).fill(0)));\n      setPlayerTurn(true);\n      setGameOver(false);\n      setWinner(null);\n      setWinningLine(null);\n      setGameStarted(false);\n      setMessage(\"Game reset! (Backend may need manual restart)\");\n    }\n  };\n  const handleClick = async col => {\n    console.log(\"Column clicked:\", col);\n    console.log(\"Player turn:\", playerTurn);\n    console.log(\"Game over:\", gameOver);\n    if (!playerTurn || gameOver) {\n      console.log(\"Click ignored - not player turn or game over\");\n      return;\n    }\n\n    // Set game as started on first move\n    if (!gameStarted) {\n      setGameStarted(true);\n    }\n    setMessage(\"Making your move...\");\n    try {\n      console.log(\"Sending move to backend:\", col);\n      const res = await fetch('http://localhost:5001/move', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          column: col\n        })\n      });\n      console.log(\"Response status:\", res.status);\n      if (!res.ok) {\n        throw new Error(`HTTP error! status: ${res.status}`);\n      }\n      const data = await res.json();\n      console.log(\"Response data:\", data);\n      if (data.error) {\n        setMessage(data.error);\n        return;\n      }\n      setBoard(data.board);\n      if (data.game_over) {\n        var _opponents$currentOpp;\n        setGameOver(true);\n        setWinner(data.winner);\n        setWinningLine(data.winning_line);\n        if (data.winner === 1) setMessage(\"You Win! 🎉\");else if (data.winner === 2) setMessage(`${((_opponents$currentOpp = opponents[currentOpponent]) === null || _opponents$currentOpp === void 0 ? void 0 : _opponents$currentOpp.split(' ')[0]) || 'AI'} Wins! 🤖`);else setMessage(\"It's a Tie! 🤝\");\n      } else {\n        var _opponents$currentOpp2;\n        setPlayerTurn(false); // Switch to AI's turn\n        const opponentName = ((_opponents$currentOpp2 = opponents[currentOpponent]) === null || _opponents$currentOpp2 === void 0 ? void 0 : _opponents$currentOpp2.split(' ')[0]) || 'AI';\n        setMessage(`${opponentName} is thinking...`);\n      }\n    } catch (error) {\n      console.error(\"Error making human move:\", error);\n      setMessage(\"❌ Cannot connect to backend. Make sure Flask server is running on localhost:5001\");\n    }\n  };\n  useEffect(() => {\n    // Only fetch AI move if it's AI's turn and game is not over\n    if (!playerTurn && !gameOver) {\n      const getAIMove = async () => {\n        try {\n          const res = await fetch('http://localhost:5001/ai-move');\n          if (!res.ok) {\n            throw new Error(`HTTP error! status: ${res.status}`);\n          }\n          const data = await res.json();\n          if (data.error) {\n            setMessage(data.error);\n            return;\n          }\n          setBoard(data.board); // Update board with AI's move\n\n          if (data.game_over) {\n            var _opponents$currentOpp3;\n            setGameOver(true);\n            setWinner(data.winner);\n            setWinningLine(data.winning_line);\n            if (data.winner === 1) setMessage(\"You Win! 🎉\");else if (data.winner === 2) setMessage(`${((_opponents$currentOpp3 = opponents[currentOpponent]) === null || _opponents$currentOpp3 === void 0 ? void 0 : _opponents$currentOpp3.split(' ')[0]) || 'AI'} Wins! 🤖`);else setMessage(\"It's a Tie! 🤝\");\n          } else {\n            setPlayerTurn(true); // Switch back to human's turn\n            setMessage(\"It's your turn!\");\n          }\n        } catch (error) {\n          console.error(\"Error getting AI move:\", error);\n          setMessage(\"Error: Cannot connect to backend for AI move\");\n        }\n      };\n      const aiThinkingTimer = setTimeout(getAIMove, 500); // Give a small delay for AI to 'think'\n      return () => clearTimeout(aiThinkingTimer); // Cleanup timeout if component unmounts\n    }\n  }, [playerTurn, gameOver]); // Depend on playerTurn and gameOver states\n\n  // Function to check if a cell is part of the winning line\n  const isWinningCell = (row, col) => {\n    if (!winningLine) return false;\n    return winningLine.some(([r, c]) => r === row && c === col);\n  };\n\n  // Function to determine cell color based on player number\n  const getCellColor = (cellValue, row, col) => {\n    const baseColor = cellValue === 1 ? 'bg-red-500' : cellValue === 2 ? 'bg-yellow-400' : 'bg-white';\n    if (isWinningCell(row, col)) {\n      return `${baseColor} ring-4 ring-white shadow-2xl`;\n    }\n    return baseColor;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center justify-center min-h-screen bg-gradient-to-br from-blue-900 via-blue-800 to-purple-800 p-4 text-white\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-5xl font-bold mb-4 text-white drop-shadow-lg\",\n      children: \"Connect 4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this), !gameStarted && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-6 flex flex-col items-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"text-lg font-semibold mb-2\",\n        children: \"Choose Your Opponent:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedOpponent,\n        onChange: e => {\n          setSelectedOpponent(e.target.value);\n          changeOpponent(e.target.value);\n        },\n        className: \"bg-blue-700 text-white px-4 py-2 rounded-lg border border-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-400 text-center min-w-64\",\n        children: Object.entries(opponents).map(([key, description]) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: key,\n          children: description\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 9\n    }, this), gameStarted && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-4 text-lg text-blue-200\",\n      children: [\"Playing against: \", /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"font-semibold text-white\",\n        children: opponents[currentOpponent]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 28\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-6 text-2xl font-semibold text-center min-h-8\",\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"relative\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"absolute -top-16 left-0 right-0 h-16 flex z-10\",\n        children: Array.from({\n          length: COLS\n        }).map((_, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          onClick: () => handleClick(colIndex),\n          className: \"flex-1 h-full cursor-pointer hover:bg-white hover:bg-opacity-20 rounded-t-lg transition-all duration-200 flex items-center justify-center\",\n          style: {\n            minHeight: '64px'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"w-3 h-3 bg-red-500 rounded-full opacity-0 hover:opacity-100 transition-opacity duration-200\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 15\n          }, this)\n        }, `click-${colIndex}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-7 gap-2 p-4 bg-blue-600 rounded-2xl shadow-2xl border-4 border-blue-500\",\n        children: board.map((row, rowIndex) => row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          onClick: () => handleClick(colIndex),\n          className: \"w-16 h-16 bg-blue-800 rounded-full flex items-center justify-center shadow-inner cursor-pointer hover:bg-blue-700 transition-colors duration-200\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `w-12 h-12 rounded-full ${getCellColor(cell, rowIndex, colIndex)} shadow-lg transition-all duration-300 ease-out border-2 border-opacity-20 border-white`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 17\n          }, this)\n        }, `${rowIndex}-${colIndex}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 15\n        }, this)))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 7\n    }, this), gameOver && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: resetGame,\n      className: \"mt-8 px-8 py-4 bg-green-500 hover:bg-green-600 text-white font-bold text-xl rounded-xl shadow-lg transition-all duration-200 transform hover:scale-105\",\n      children: \"Play Again\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-6 text-sm text-blue-200 text-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Click on a column to drop your piece (red)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Connect 4 pieces horizontally, vertically, or diagonally to win!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 205,\n    columnNumber: 5\n  }, this);\n}\n_s(Connect4Board, \"+Y8QA5rE3PuLViMAC0L9Arv4QfE=\");\n_c = Connect4Board;\nvar _c;\n$RefreshReg$(_c, \"Connect4Board\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","ROWS","COLS","Connect4Board","_s","board","setBoard","Array","fill","map","playerTurn","setPlayerTurn","gameOver","setGameOver","winner","setWinner","message","setMessage","winningLine","setWinningLine","gameStarted","setGameStarted","opponents","setOpponents","selectedOpponent","setSelectedOpponent","currentOpponent","setCurrentOpponent","loadOpponents","res","fetch","data","json","current","error","console","changeOpponent","aiType","method","headers","body","JSON","stringify","ai_type","resetGame","handleClick","col","log","column","status","ok","Error","game_over","_opponents$currentOpp","winning_line","split","_opponents$currentOpp2","opponentName","getAIMove","_opponents$currentOpp3","aiThinkingTimer","setTimeout","clearTimeout","isWinningCell","row","some","r","c","getCellColor","cellValue","baseColor","className","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","Object","entries","key","description","from","length","_","colIndex","onClick","style","minHeight","rowIndex","cell","_c","$RefreshReg$"],"sources":["/Users/vincentng/Documents/170/connect_4/frontend/src/Connect4Board.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst ROWS = 6;\nconst COLS = 7;\n\nexport default function Connect4Board() {\n  // Initialize board with 0s (empty) to match Python backend\n  const [board, setBoard] = useState(Array(ROWS).fill(null).map(() => Array(COLS).fill(0)));\n  const [playerTurn, setPlayerTurn] = useState(true); // true for human (Player 1), false for AI (Player 2)\n  const [gameOver, setGameOver] = useState(false);\n  const [winner, setWinner] = useState(null); // null, 0 (tie), 1 (Player 1), 2 (Player 2)\n  const [message, setMessage] = useState(\"Choose your opponent and click a column to start!\");\n  const [winningLine, setWinningLine] = useState(null);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [opponents, setOpponents] = useState({});\n  const [selectedOpponent, setSelectedOpponent] = useState(\"alphaBetaAI\");\n  const [currentOpponent, setCurrentOpponent] = useState(\"alphaBetaAI\");\n\n  // Load available opponents when component mounts\n  useEffect(() => {\n    const loadOpponents = async () => {\n      try {\n        const res = await fetch('http://localhost:5001/get-opponents');\n        const data = await res.json();\n        setOpponents(data.opponents);\n        setCurrentOpponent(data.current);\n        setSelectedOpponent(data.current);\n      } catch (error) {\n        console.error(\"Error loading opponents:\", error);\n      }\n    };\n    loadOpponents();\n  }, []);\n\n  // Function to change opponent\n  const changeOpponent = async (aiType) => {\n    if (gameStarted) {\n      setMessage(\"Cannot change opponent after game has started!\");\n      return;\n    }\n\n    try {\n      const res = await fetch('http://localhost:5001/set-opponent', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ ai_type: aiType })\n      });\n\n      const data = await res.json();\n      if (data.error) {\n        setMessage(data.error);\n      } else {\n        setCurrentOpponent(aiType);\n        setSelectedOpponent(aiType);\n        setMessage(`Now playing against ${opponents[aiType]}. Click a column to start!`);\n      }\n    } catch (error) {\n      console.error(\"Error changing opponent:\", error);\n      setMessage(\"Error changing opponent\");\n    }\n  };\n\n  // Function to reset the game state\n  const resetGame = async () => {\n    try {\n      await fetch('http://localhost:5001/reset', { method: 'POST' });\n      setBoard(Array(ROWS).fill(null).map(() => Array(COLS).fill(0)));\n      setPlayerTurn(true);\n      setGameOver(false);\n      setWinner(null);\n      setWinningLine(null);\n      setGameStarted(false);\n      setMessage(\"Choose your opponent and click a column to start!\");\n    } catch (error) {\n      console.error(\"Error resetting game:\", error);\n      // Reset frontend state even if backend reset fails\n      setBoard(Array(ROWS).fill(null).map(() => Array(COLS).fill(0)));\n      setPlayerTurn(true);\n      setGameOver(false);\n      setWinner(null);\n      setWinningLine(null);\n      setGameStarted(false);\n      setMessage(\"Game reset! (Backend may need manual restart)\");\n    }\n  };\n\n  const handleClick = async (col) => {\n    console.log(\"Column clicked:\", col);\n    console.log(\"Player turn:\", playerTurn);\n    console.log(\"Game over:\", gameOver);\n    \n    if (!playerTurn || gameOver) {\n      console.log(\"Click ignored - not player turn or game over\");\n      return;\n    }\n\n    // Set game as started on first move\n    if (!gameStarted) {\n      setGameStarted(true);\n    }\n\n    setMessage(\"Making your move...\");\n\n    try {\n      console.log(\"Sending move to backend:\", col);\n      const res = await fetch('http://localhost:5001/move', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ column: col })\n      });\n\n      console.log(\"Response status:\", res.status);\n\n      if (!res.ok) {\n        throw new Error(`HTTP error! status: ${res.status}`);\n      }\n\n      const data = await res.json();\n      console.log(\"Response data:\", data);\n\n      if (data.error) {\n        setMessage(data.error);\n        return;\n      }\n\n      setBoard(data.board);\n\n      if (data.game_over) {\n        setGameOver(true);\n        setWinner(data.winner);\n        setWinningLine(data.winning_line);\n        if (data.winner === 1) setMessage(\"You Win! 🎉\");\n        else if (data.winner === 2) setMessage(`${opponents[currentOpponent]?.split(' ')[0] || 'AI'} Wins! 🤖`);\n        else setMessage(\"It's a Tie! 🤝\");\n      } else {\n        setPlayerTurn(false); // Switch to AI's turn\n        const opponentName = opponents[currentOpponent]?.split(' ')[0] || 'AI';\n        setMessage(`${opponentName} is thinking...`);\n      }\n    } catch (error) {\n      console.error(\"Error making human move:\", error);\n      setMessage(\"❌ Cannot connect to backend. Make sure Flask server is running on localhost:5001\");\n    }\n  };\n\n  useEffect(() => {\n    // Only fetch AI move if it's AI's turn and game is not over\n    if (!playerTurn && !gameOver) {\n      const getAIMove = async () => {\n        try {\n          const res = await fetch('http://localhost:5001/ai-move');\n          \n          if (!res.ok) {\n            throw new Error(`HTTP error! status: ${res.status}`);\n          }\n\n          const data = await res.json();\n\n          if (data.error) {\n            setMessage(data.error);\n            return;\n          }\n          \n          setBoard(data.board); // Update board with AI's move\n\n          if (data.game_over) {\n            setGameOver(true);\n            setWinner(data.winner);\n            setWinningLine(data.winning_line);\n            if (data.winner === 1) setMessage(\"You Win! 🎉\");\n            else if (data.winner === 2) setMessage(`${opponents[currentOpponent]?.split(' ')[0] || 'AI'} Wins! 🤖`);\n            else setMessage(\"It's a Tie! 🤝\");\n          } else {\n            setPlayerTurn(true); // Switch back to human's turn\n            setMessage(\"It's your turn!\");\n          }\n        } catch (error) {\n          console.error(\"Error getting AI move:\", error);\n          setMessage(\"Error: Cannot connect to backend for AI move\");\n        }\n      };\n      const aiThinkingTimer = setTimeout(getAIMove, 500); // Give a small delay for AI to 'think'\n      return () => clearTimeout(aiThinkingTimer); // Cleanup timeout if component unmounts\n    }\n  }, [playerTurn, gameOver]); // Depend on playerTurn and gameOver states\n\n  // Function to check if a cell is part of the winning line\n  const isWinningCell = (row, col) => {\n    if (!winningLine) return false;\n    return winningLine.some(([r, c]) => r === row && c === col);\n  };\n\n  // Function to determine cell color based on player number\n  const getCellColor = (cellValue, row, col) => {\n    const baseColor = cellValue === 1 ? 'bg-red-500' : cellValue === 2 ? 'bg-yellow-400' : 'bg-white';\n    \n    if (isWinningCell(row, col)) {\n      return `${baseColor} ring-4 ring-white shadow-2xl`;\n    }\n    \n    return baseColor;\n  };\n\n  return (\n    <div className=\"flex flex-col items-center justify-center min-h-screen bg-gradient-to-br from-blue-900 via-blue-800 to-purple-800 p-4 text-white\">\n      <h1 className=\"text-5xl font-bold mb-4 text-white drop-shadow-lg\">Connect 4</h1>\n      \n      {/* Opponent Selection Dropdown */}\n      {!gameStarted && (\n        <div className=\"mb-6 flex flex-col items-center\">\n          <label className=\"text-lg font-semibold mb-2\">Choose Your Opponent:</label>\n          <select \n            value={selectedOpponent}\n            onChange={(e) => {\n              setSelectedOpponent(e.target.value);\n              changeOpponent(e.target.value);\n            }}\n            className=\"bg-blue-700 text-white px-4 py-2 rounded-lg border border-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-400 text-center min-w-64\"\n          >\n            {Object.entries(opponents).map(([key, description]) => (\n              <option key={key} value={key}>\n                {description}\n              </option>\n            ))}\n          </select>\n        </div>\n      )}\n\n      {gameStarted && (\n        <div className=\"mb-4 text-lg text-blue-200\">\n          Playing against: <span className=\"font-semibold text-white\">{opponents[currentOpponent]}</span>\n        </div>\n      )}\n      \n      <div className=\"mb-6 text-2xl font-semibold text-center min-h-8\">\n        {message}\n      </div>\n\n      <div className=\"relative\">\n        {/* Column click areas */}\n        <div className=\"absolute -top-16 left-0 right-0 h-16 flex z-10\">\n          {Array.from({ length: COLS }).map((_, colIndex) => (\n            <div\n              key={`click-${colIndex}`}\n              onClick={() => handleClick(colIndex)}\n              className=\"flex-1 h-full cursor-pointer hover:bg-white hover:bg-opacity-20 rounded-t-lg transition-all duration-200 flex items-center justify-center\"\n              style={{ minHeight: '64px' }}\n            >\n              <div className=\"w-3 h-3 bg-red-500 rounded-full opacity-0 hover:opacity-100 transition-opacity duration-200\" />\n            </div>\n          ))}\n        </div>\n\n        {/* Game board */}\n        <div className=\"grid grid-cols-7 gap-2 p-4 bg-blue-600 rounded-2xl shadow-2xl border-4 border-blue-500\">\n          {board.map((row, rowIndex) => (\n            row.map((cell, colIndex) => (\n              <div\n                key={`${rowIndex}-${colIndex}`}\n                onClick={() => handleClick(colIndex)}\n                className=\"w-16 h-16 bg-blue-800 rounded-full flex items-center justify-center shadow-inner cursor-pointer hover:bg-blue-700 transition-colors duration-200\"\n              >\n                <div \n                  className={`w-12 h-12 rounded-full ${getCellColor(cell, rowIndex, colIndex)} shadow-lg transition-all duration-300 ease-out border-2 border-opacity-20 border-white`}\n                />\n              </div>\n            ))\n          ))}\n        </div>\n      </div>\n\n      {gameOver && (\n        <button\n          onClick={resetGame}\n          className=\"mt-8 px-8 py-4 bg-green-500 hover:bg-green-600 text-white font-bold text-xl rounded-xl shadow-lg transition-all duration-200 transform hover:scale-105\"\n        >\n          Play Again\n        </button>\n      )}\n\n      <div className=\"mt-6 text-sm text-blue-200 text-center\">\n        <p>Click on a column to drop your piece (red)</p>\n        <p>Connect 4 pieces horizontally, vertically, or diagonally to win!</p>\n      </div>\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}